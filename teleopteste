package org.firstinspires.ftc.teamcode.INTOTHEDEEP.Movimentação;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.arcrobotics.ftclib.controller.PIDController;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorImplEx;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.VoltageSensor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.acmerobotics.dashboard.config.Config;
import com.qualcomm.robotcore.hardware.Servo;

@Config
@TeleOp
public class teleopteste extends LinearOpMode {

    private DcMotorEx leftFront, leftBack, rightBack, rightFront;
    private DcMotorEx braco;
    private DcMotorEx viper;
    private Servo claw1, claw2, claw;
    private VoltageSensor ControlHub_VoltageSensor;
    private ClawAngulator clawAngulator;
    private PIDController bracocontroller;
    private PIDController vipercontroller;

    //*******VARIÁVEIS********

    // Movimentação do chassi
    float speedFactor = 1.5F;
    double drive = 0; // Potência de avanço desejada (-1 a +1)
    double strafe = 0; // Potência de strafe desejada (-1 a +1)
    double turn = 0; // Potência de rotação desejada (-1 a +1)

    // Movimentação do braço
    public static double p = 0.002, i = 0, d = 0.0001;
    public static double f = 0.0004;
    public static int target = 0;
    double Kp = 0.0054;
    double Kd = 0.0001;
    int Ki = 0;
    double vipertarget = 0;
    boolean BRACO = false;
    double viperBoost = 2; // Aumentar a vel do viper

    // Movimentação da garra
    double servo = 0.9;
    boolean controle = false;

    boolean voltaclip = false;

    boolean seguY = false;

    @Override
    public void runOpMode() {

        // PID
        bracocontroller = new PIDController(p, i, d);
        vipercontroller = new PIDController(Kp, Ki, Kd);
        double ticks_in_degree = 2140 / 90.0;

        waitForStart(); // Espera o início do OpMode

        // Inicializa os componentes
        leftFront = hardwareMap.get(DcMotorEx.class, "leftFront");
        leftBack = hardwareMap.get(DcMotorEx.class, "leftBack");
        rightBack = hardwareMap.get(DcMotorEx.class, "rightBack");
        rightFront = hardwareMap.get(DcMotorEx.class, "rightFront");
        braco = hardwareMap.get(DcMotorImplEx.class, "braco");
        viper = hardwareMap.get(DcMotorImplEx.class, "viper");
        claw1 = hardwareMap.get(Servo.class, "claw1");
        claw2 = hardwareMap.get(Servo.class, "claw2");
        claw = hardwareMap.get(Servo.class, "claw");
        ControlHub_VoltageSensor = hardwareMap.get(VoltageSensor.class, "Control Hub");

        // Chamado função externa da garra
        clawAngulator = new ClawAngulator(braco, claw1, claw2);

        // Define a direção dos motores
        leftFront.setDirection(DcMotorSimple.Direction.FORWARD);
        rightFront.setDirection(DcMotorSimple.Direction.REVERSE);
        leftBack.setDirection(DcMotorSimple.Direction.FORWARD);
        rightBack.setDirection(DcMotorSimple.Direction.REVERSE);

        // Define o comportamento de zero potência dos motores
        leftFront.setZeroPowerBehavior(DcMotorEx.ZeroPowerBehavior.BRAKE);
        leftBack.setZeroPowerBehavior(DcMotorEx.ZeroPowerBehavior.BRAKE);
        rightBack.setZeroPowerBehavior(DcMotorEx.ZeroPowerBehavior.BRAKE);
        rightFront.setZeroPowerBehavior(DcMotorEx.ZeroPowerBehavior.BRAKE);

        // Reset e leitura do encoder para o motor do braço
        braco.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        braco.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        viper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        viper.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        // Loop de execução enquanto o opMode estiver ativo
        while (opModeIsActive()) {
            int viperpos = viper.getCurrentPosition();
            double viperpid = vipercontroller.calculate(viperpos, vipertarget);
            viperpid *= viperBoost;

            // Atualiza a configuração do PID
            bracocontroller.setPID(p, i, d);

            // Calcula a posição do braço e o valor do PID
            int bracoPos = braco.getCurrentPosition() * -1;
            double pid = bracocontroller.calculate(bracoPos, target);
            double ff = Math.cos(Math.toRadians(target / ticks_in_degree)) * f;

            // CHASSI
            drive = -gamepad1.left_stick_y / speedFactor;
            strafe = -gamepad1.left_stick_x / speedFactor;
            turn = -gamepad1.right_stick_x / 3.0;
            moveRobot(drive, strafe, turn);

            // BRACO e VIPER funções
            moveBraco(pid + ff);
            moveTarget();
            moveViper(viperpid);
            moveServo(servo);

            /*if (controle) {
                clawAngulator.updateClawAngulations();
            }*/

            if (gamepad2.right_bumper) {
                servo = 0;
            } else if (gamepad2.left_bumper) {
                servo = 0.7;
            }

            if (BRACO) {
                if (viperpos < 700) {
                    target = 100; //30
                    servo = 0.9;
                }
            }

            if (gamepad2.right_trigger > 0) {
                claw.setPosition(1);
            } else {
                claw.setPosition(0);
            }

            if (ControlHub_VoltageSensor.getVoltage() < 6) {
                break;
            }

            telemetry.addData("pos", bracoPos);
            telemetry.addData("target", target);
            telemetry.addData("viper", viperpos);
            telemetry.addData("vipertarget", vipertarget);
            telemetry.addData("servopos", servo);
            telemetry.update();
        }
    }

    //******FUNÇÕES*******
    public void moveRobot(double x, double y, double yaw) {
        double leftFrontPower = x - y - yaw;
        double rightFrontPower = x + y + yaw;
        double leftBackPower = x + y - yaw;
        double rightBackPower = x - y + yaw;

        double max = Math.max(Math.abs(leftFrontPower), Math.abs(rightFrontPower));
        max = Math.max(max, Math.abs(leftBackPower));
        max = Math.max(max, Math.abs(rightBackPower));

        if (max > 1.0) {
            leftFrontPower /= max;
            rightFrontPower /= max;
            leftBackPower /= max;
            rightBackPower /= max;
        }

        // Controle de velocidade por zona
        if (gamepad1.left_trigger > 0) {
            speedFactor = 4.8F;
        } else if (gamepad1.right_trigger > 0) {
            speedFactor = 1.2F;
        } else {
            speedFactor = 1.5F;
        }

        leftFront.setPower(leftFrontPower);
        rightFront.setPower(rightFrontPower);
        leftBack.setPower(leftBackPower);
        rightBack.setPower(rightBackPower);
    }

    public void moveBraco(double power) {
        braco.setPower(power);
    }

    public void moveViper(double power) {
        viper.setPower(power);
    }

    public void moveServo(double servoPosition) {
        claw1.setPosition(servoPosition);
        claw2.setPosition(servoPosition);
    }

    public void moveTarget() {

        if (gamepad2.b) {
            //Volta geral
            if (!seguY){
                servo = 0.7;
                vipertarget = 5;
                BRACO = true;
                controle = false;
            }
        }
        if (gamepad2.b && gamepad2.right_trigger > 0) {
            //Volta do basket alto
            servo = 0.3;
            vipertarget = 20;
            BRACO = true;
            controle = false;
            seguY = false;
        }
        if (gamepad2.a) {
            //CLIP ALTO
            if (!seguY){
                target = 1200;
                vipertarget = 1000;
                servo = 0.2;
                BRACO = false;
                controle = false;
                voltaclip = false;
            }
        }
        if (gamepad2.dpad_right) {
            //CLIP BAIXO
            if (!seguY){
                target = 800;
                vipertarget = 800;
                servo = 0.2;
                BRACO = false;
                controle = false;
                voltaclip = true;
            }
        }
        if (gamepad2.y) {
            //BASKET ALTO
            target = 2300;
            vipertarget = 1550;
            BRACO = false;
            controle = false;
            servo = 0.3; //quanto menor, mais reto
            seguY = true;
        }
        if (gamepad2.x) {
            //SUBMERGIBLE MÉDIO
            if (!seguY){
                target = 350;
                vipertarget = 800;
                servo = 0.5;
                BRACO = false;
                controle = false;
            }
        }
        if (gamepad1.dpad_up) {
            //SUBMERGIBLE MAIS
            if (!seguY){
                target = 350;
                vipertarget = 1100;
                BRACO = false;
                controle = false;
            }
        }
        if (gamepad2.dpad_left) {
            //SUBMERGIBLE MENOS
            if (!seguY){
                target = 350; 
                vipertarget = 500;
                servo = 0;
                BRACO = false;
                controle = false;
            }
        }
        if (gamepad2.left_trigger > 0){
            // Abaixada para pegar sample no chão
            if (!seguY){
                target = 150;
            }
        }
        if (gamepad2.dpad_up) {
            // Subidinha do clipe da borda
            if (!seguY){
                target = 750;
            }
        }
        if (gamepad2.dpad_down){
            // Abaixada da clipagem no alto e baixo
            if (!seguY){
                if (voltaclip){
                    target = 400;
                    vipertarget = 700;
                } else {
                    target = 700;
                    vipertarget = 1000;
                }
            }
        }
        if (gamepad2.a && gamepad2.right_trigger > 0){
            // Coleta de specimen na borda
            if (!seguY) {
                target = 550;
                vipertarget = 500;
                servo = 0.4;
            }
        }
        if (gamepad1.b) {
            //abaixa braco pra resetar
            target = -965;
            vipertarget = -785;
        }
        if (gamepad1.back){
            braco.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            braco.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            viper.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            viper.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            target = 0;
            vipertarget = 0;
        }
    }
}
